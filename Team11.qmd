---
title: "outlier제거(IQR3기준, 최소화) 및 지역별, 연도별 평단가 분산분석 + 다중회귀분석(종속변수 SalePrice)"
author: "2023-2학기 통계자료분석 1조 김재현"
date: "2023-12-06"
date-modified: "2023-12-23"
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
---

```{r setup, include=FALSE}
#| label: 사용할 패키지 불러오기

# 사용할 패키지 불러오기
library(readxl)
library(dplyr)
library(DescTools)
library(agricolae)
library(tidyverse)
library(car)
library(MASS)
library(ggpubr)
library(PerformanceAnalytics)
library(gvlma)
```

## 데이터 불러오기 및 변수 정리

```{r}
#| label: 데이터 불러오기
# 데이터 불러오기

rawdata = read_excel("./Team_Assignment/Reyeme2.xls")
data1 = as.data.frame(rawdata)
data1$FirstDate = as.Date(as.numeric(as.character(data1$FirstDate)),origin="1899-12-30")
data1$RC = as.factor(data1$RC)
data1$Area = as.factor(data1$Area)

```

```{r}
#| label: 데이터 변수 클래스 확인
# 데이터 변수 클래스 확인

str(data1)
```


```{r}
#| label: 결측값 존재 확인
# 결측값 존재 확인

sum(is.na(data1))
```

:::{.callout-note}
결측값 9개 존재.
:::

```{r}
#| label: 결측값 있는 행 확인
# 결측값 있는 행 확인

which(rowSums(is.na(data1)) > 0)

```

:::{.callout-note}
결측값 중 한개를 제외하곤 모두 UNIT 열 값이다. UNIT는 건물내 특정 주거공간을 나타내는 호수(ex 101호, 102호)이다. Reyem Affiar가 구매하려는 건물의 UNIT는 주어져있지 않기 때문에 Reyem Affiar가 구매하려는 건물 가격을 추정하는데에 UNIT 변수는 사용하지 않을 것으로 예상한다. 나머지 한개의 결측값은 First Date에서 나타났으며, 254행에 있다. FirstDate열은 사용할 예정이므로 254행만 제외한다.
:::

```{r}
#| label: data2 = data1의 결측값 있는 행 중 254행 제거

#결측값 있는 행 중 254행 제거

data2 = data1[-254,]
```

```{r}
#| label: data3 = data2의 Address 열 나누기 
#| warning: false

# data3 = data2의 Address 열 나누기 

data3 <- separate(data2, Address, into = c("AddressNo", "AddressName", "Street"), sep = " ")
data3$AddressNo = as.factor(data3$AddressNo)
data3$AddressName = as.factor(data3$AddressName)
data3$Street = as.factor(data3$Street)
```


```{r}

#| label: First Date를 연 월 일로 열 나누기
# First Date를 연 월 일로 열 나누기

data4 <- separate(data3, FirstDate, into = c("YearF", "MonthF", "DateF"), sep = "-")
data4$YearF = as.factor(data4$YearF)
data4$MonthF = as.factor(data4$MonthF)
data4$DateF = as.factor(data4$DateF)

```

```{r}

#| label: 평단가 PrPerI 만들기
# 평단가 PrPerI 만들기

data4$PrPerI = data4$SalePrice/data4$Interior
```

```{r}

#| label: Bed/Rooms = BedPerR, Bath/Rooms = BathPerR 만들기

# Bed/Rooms = BedPerR, Bath/Rooms = BathPerR 만들기

data4$BedPerR  = data4$Bed/data4$Rooms
data4$BathPerR = data4$Bath/data4$Rooms
```

```{r}
#| label: str(data4)

str(data4)
```

## outlier 제거

### 1. FirstDate에서 Year가 너무 다른 데이터 삭제

```{r}
#| label: YearF(FirstDate에서 연도만 추출) factor의 수준 확인

# YearF(FirstDate에서 연도만 추출) factor의 수준 확인
levels(data4$YearF)
```
```{r}
#| label: YearF 변수에서 1920년 매매 자료 확인
# YearF 변수에서 1920년 매매 자료 확인
outliers_YearF = data4$Days[data4$YearF=="1920"]
outliers_YearF
```

```{r}
#| label: YearF 변수에서 1920년 매매 자료 제거(data7)
# YearF 변수에서 1920년 매매 자료 제거(data7)
outliers_YearF_index = which(data4$YearF=="1920")
data5 = data4[-outliers_YearF_index,]
```

1개 제거

### 2. 너무 크거나 작은 면적(Interior) 제거

```{r}
#| label: Interior변수의 boxplot 확인
# Interior변수의 boxplot 확인
 
boxplot(data5$Interior,range = 3)
```


```{r}
#| label: Interior변수에서 3 IQR을 넘는 극단값 확인
# Interior변수에서 3 IQR을 넘는 극단값 확인
Lo = quantile(data5$Interior,0.25)-3*IQR(data5$Interior)
Up = quantile(data5$Interior,0.75)+3*IQR(data5$Interior)
outliers_int =data5$Interior[(data5$Interior<Lo) | (data5$Interior>Up)]
outliers_int
```

```{r}
#| label: Interior변수 극단값의 인덱스 추출 및 제거(data8)
# Interior변수 극단값의 인덱스 추출 및 제거(data8)
outliers_int_index = which((data5$Interior<Lo) | (data5$Interior>Up))
data6 = data5[-outliers_int_index,]
```

2개 제거


### 3. 너무 크거나 작은 Tax 제거

```{r}
#| label: Tax 변수의 boxplot 확인
# Tax 변수의 boxplot 확인

boxplot(data6$Tax,range=3)
```


```{r}
#| label: Tax변수에서 3 IQR을 넘는 극단값 확인

# Tax변수에서 3 IQR을 넘는 극단값 확인

Lo = quantile(data6$Tax,0.25)-3*IQR(data6$Tax)
Up = quantile(data6$Tax,0.75)+3*IQR(data6$Tax)
outliers_tax =data6$Tax[(data6$Tax<Lo) | (data6$Tax>Up)]
outliers_tax
```

```{r}
#| label: Tax변수 극단값의 인덱스 추출 및 제거(dataA)

# Tax변수 극단값의 인덱스 추출 및 제거(dataA)

outliers_tax_index = which((data6$Tax<Lo) | (data6$Tax>Up))
data7 = data6[-outliers_tax_index,]
```

4개 제거


### 4. 너무 크거나 작은 Condo 제거

```{r}
#| label: Condo 변수의 boxplot 확인
# Condo 변수의 boxplot 확인

boxplot(data7$Condo,range =3)
```


```{r}
#| label: Condo변수에서 3 IQR을 넘는 극단값 확인
# Condo변수에서 3 IQR을 넘는 극단값 확인


Lo = quantile(data7$Condo,0.25)-3*IQR(data7$Condo)
Up = quantile(data7$Condo,0.75)+3*IQR(data7$Condo)
outliers_Condo =data7$Condo[(data7$Condo<Lo) | (data7$Condo>Up)]
outliers_Condo
```

```{r}
#| label: Condo변수 극단값의 인덱스 추출 및 제거(dataB)
# Condo변수 극단값의 인덱스 추출 및 제거(dataB)


outliers_Condo_index = which((data7$Condo<Lo) | (data7$Condo>Up))
data8 = data7[-outliers_Condo_index,]
```

10개 제거


### 5. 너무 많거나 적은 Rooms 제거

```{r}
#| label: Rooms 변수의 boxplot 확인
# Rooms 변수의 boxplot 확인

boxplot(data8$Rooms,range = 3)
```

아웃라이어 보이지 않음 제거 x

### 6. 너무 많거나 적은 BED/Rooms = BedPerR 제거

```{r}
#| label: BedPerR 변수의 boxplot 확인
# BedPerR 변수의 boxplot 확인
 
boxplot(data8$BedPerR, range = 3)
```

아웃라이어 보이지 않음 제거 x

### 7. 너무 많거나 적은 BATH/Rooms 제거

```{r}
#| label: BathPerR 변수의 boxplot 확인
# BathPerR 변수의 boxplot 확인

boxplot(data8$BathPerR,range = 3)
```

아웃라이어 보이지 않음 제거 x

### 8. Days가 너무 긴 혹은 짧은 데이터 삭제

```{r}
#| label: Days변수의 boxplot 확인
# Days변수의 boxplot 확인
boxplot(data5$Days, range = 3)
```


```{r}
#| label: Days변수에서 3 IQR을 넘는 극단값 확인
# Days변수에서 3 IQR을 넘는 극단값 확인
Lo = quantile(data8$Days,0.25)-3*IQR(data8$Days)
Up = quantile(data8$Days,0.75)+3*IQR(data8$Days)
outliers_days =data8$Days[(data8$Days<Lo) | (data8$Days>Up)]
outliers_days
```

```{r}
#| label: Days변수 극단값의 인덱스 추출 및 제거
# Days변수 극단값의 인덱스 추출 및 제거
outliers_days_index = which((data8$Days<Lo) | (data8$Days>Up))
data9 = data8[-outliers_days_index,]
```

5개 제거

### 9. Area 수준별 갯수 확인 5개 미만일경우 제거

```{r}
#| label: Area factor의 수준별 빈도수 확인
# Area factor의 수준별 빈도수 확인
table(data9$Area)
```

C,FP

```{r}
#| label: Area변수에서 C,FP만 뽑아내기
# Area변수에서 C,FP만 뽑아내기

outliers_area =data9$Area[(data9$Area=="C") | (data9$Area=="FP")]
outliers_area
```

```{r}
#| label: Area변수 C,FP 인덱스 추출 및 제거
# Area변수 C,FP 인덱스 추출 및 제거
outliers_area_index = which((data9$Area=="C") | (data9$Area=="FP"))

dataA = data9[-outliers_area_index,]
```

6개 제거

### 10. RC 0,1 갯수 확인 (한쪽이 너무 적으면 제거)

```{r}
#| label: RC factor의 수준별 빈도수 확인
# RC factor의 수준별 빈도수 확인

table(data9$RC)
```

둘다 100개 이상의 데이터를 갖고 있으므로 한쪽 제거 안함


### 11. SalePrice ~ Area 분산분석 모형에서 IQR 3이상 극단값

```{r}
#| label: dataA를 이용한 분산분석 모형 M1(SalePrice ~ Area)
# dataA를 이용한 분산분석 모형 M1(SalePrice ~ Area)
M1 = aov(SalePrice ~ Area, dataA)
ri = M1$residuals
```

```{r}
#| label: M1(dataA) outlier 확인(boxplot IQR3)
# M1(dataA) outlier 확인(boxplot IQR3)
bp =boxplot(ri ~ dataA$Area, xlab = "", ylab = "residuals", range= 3, boxwex = 0.4) # boxwex는 상자폭을 0.4배 줄이는 옵션
```

```{r}
#| label: boxplot에서 극단값 인덱스 반환
# boxplot에서 극단값 인덱스 반환
outliers = bp$out
outliers
```

```{r}
#| label: ri 극단값의 인덱스 추출 및 제거
# ri 극단값의 인덱스 추출 및 제거
outliers_index = 423
dataB = dataA[-outliers_index,]
```

1개 데이터 제거



### outlier 제거 결과

:::{.callout-note}
결과적으로 총 426개 관측치의 아래와 같은 데이터만 남았다.
:::

```{r}
#| label: head(dataD)

head(dataB)
```




## SalePrice ~ Area 분산분석(dataD)

```{r}
#| label: Area 변수 수준별 빈도수 확인
# Area 변수 수준별 빈도수 확인

table(dataB$Area)
```

```{r}
#| label: dataB를 이용한 분산분석 M2(SalePrice ~ Area) 정의
# dataB를 이용한 분산분석 M2(SalePrice ~ Area) 정의

M2 = aov(SalePrice ~ Area, dataB)
anova(M2)
```

Area의 모든 평균이 같다는 귀무가설을 기각했다.

등분산성을 확인해보면..

```{r}
#| label: M2(dataD) boxplot(IQR 3) 확인
ri = M2$residuals
boxplot(ri ~ dataB$Area, xlab = "", ylab = "residuals", range= 3, boxwex = 0.4) # boxwex는 상자폭을 0.4배 줄이는 옵션
```



```{r}
#| label: dataD의 등분산성 그래프 확인 ggline
#| warning: false
ggpubr::ggline(dataB, x = "Area", y = "SalePrice", add = c("mean_sd", "jitter"), 
       title = "지역별 매매가", ylab ="SalePrice", xlab = "", ggtheme = theme_classic(base_family = "Noto Sans KR") )
```

Area별로 분포가 크게 다른 것으로 보아 등분산성을 만족하지 않는 것으로 보인다.

```{r}
#| label: M2(SalePrice ~ Area) 잔차분포 확인 - 정규성 검증

plot(density(M2$residuals),xlab = "",main = "residual distribution", lwd = 2)
```

잔차의 분포가 상당히 정규성을 띄는 분포를 보인다. 

그러므로 bartlett test를 이용하여 등분산성을 검정한다.

```{r}
#| label: M2에 대한 BartlettTest - 등분산성 검정

bartlett.test(SalePrice ~ Area, dataB)
```

p값이(`1.436e-15`) 등분산성을 만족한다는 귀무가설을 기각하고 있기 때문에 등분산성을 갖고 있다고 볼 수 없다.

때문에 비모수검정을 진행한다.

### 비모수검정

```{r}
#| label: 비모수검정 kruskal.test() - dataB 사용

kruskal.test(SalePrice ~ Area, dataB)
```

p-value가 매우 작으므로 그룹간 차이가 존재하는 것으로 판단할 수 있다.

사후검정, 다중비교를 진행한다.
작은 차이라도 찾아내기 위해 fisher lsd 검정과 같이 개별 유의수준을 통제하는 방식으로 wilcoxon 검정을 사용한다.

```{r}
#| label: dataB Wilcoxon 검정 - 다중 비교 사후검정 (순위기반)
#| warning: false
# dataD Wilcoxon 검정 - 다중 비교 사후검정 (순위기반)

pairwise.wilcox.test(dataB$SalePrice, dataB$Area, p.adjust.method = "none")
```

wilcoxon 검정을 기반으로 두 변수간 p값이 0.1 이하인 경우 붉은 타일이 나타나도록 했다.

```{r}
#| label: pairwise.wilcox.test 기반 타일플롯 그리기
#| warning: false
#| echo: false
# pairwise.wilcox.test 기반 타일플롯 그리기


result <- pairwise.wilcox.test(dataB$SalePrice, dataB$Area, p.adjust.method = "none")

# 결과를 데이터 프레임으로 변환
result_df <- as.data.frame(result$p.value)
result_df$Comparison <- rownames(result_df)

# 데이터 프레임 재구성
result_df_long <- reshape2::melt(result_df, id.vars = "Comparison")
names(result_df_long) <- c("Comparison1", "Comparison2", "p.value")

# NA 제거
result_df_long <- result_df_long[!is.na(result_df_long$p.value), ]

result_df_long$color <- ifelse(result_df_long$p.value <= 0.1, "red", "blue")

# 타일 플롯 생성
ggplot(result_df_long, aes(x = Comparison1, y = Comparison2, fill = color)) +
  geom_tile() +
  scale_fill_identity() +
  theme_minimal() +
  labs(title = "Pairwise Wilcox Test P-Values", 
       fill = "P-Value")
  

```

```{r}
#| label: Area 변수의 순서를 변경한 dataC

# Area 변수의 순서를 변경한 dataC

dataC = dataB
# Area 변수의 순서를 변경
dataC$Area <- factor(dataB$Area, levels = c("E","K","W","RA","AG","AH","NW","M","HS","RS","N","CP","PS","SH"))
```

```{r}
#| label: dataC의 Area에 따른 지역별 매매가 ggline
#| echo: false

# ggline 함수를 사용하여 그래프 생성
ggline(dataC, x = "Area", y = "SalePrice", add = c("mean_sd", "jitter"), 
       title = "지역별 매매가", ylab ="SalePrice", xlab = "", 
       ggtheme = theme_classic(base_family = "Noto Sans KR"))

```
### Area 분산분석 결과

위 분산분석결과를 통해 평단가가 차이 나지 않는 지역을 묶은 새로운 Zone 변수 생성

1Zone = "E"  
2Zone = "K","W","RA","AG","AH","NW"
3Zone = "M"  
4Zone = "HS","RS","N","CP","PS"
5Zone = "SH"

```{r}
#| label: Zone 변수 추가한 dataD

# Zone 변수 추가한 dataD

dataD = dataC
for(i in 1:nrow(dataD)){
  if(dataD$Area[i] == "E"){
    dataD$Zone[i] = "1Zone"
    } 
  else if(dataD$Area[i] == "K"|dataD$Area[i] == "W"|dataD$Area[i] == "RA"|dataD$Area[i] == "AG"|dataD$Area[i] == "AH"|dataD$Area[i] == "NW"){
    dataD$Zone[i] = "2Zone"
    } 
  else if(dataD$Area[i] == "M"){
    dataD$Zone[i] = "3Zone"
    } 
  else if(dataD$Area[i] == "HS"|dataD$Area[i] == "RS"|dataD$Area[i] == "N"|dataD$Area[i] == "CP"|dataD$Area[i] == "PS"){
    dataD$Zone[i] = "4Zone"
    }
  else if(dataD$Area[i] == "SH"){
    dataD$Zone[i] = "5Zone"
    } 
}
dataD$Zone = as.factor(dataD$Zone)
```

```{r}
head(dataD)
```

## SalePrice ~ YearF 분산분석(dataF)

```{r}
#| label: dataD를 이용한 SalePrice ~ YearF분산분석 M3 정의
# dataD를 이용한 SalePrice ~ YearF분산분석 M3 정의


M3 = aov(SalePrice ~ YearF, dataD)
anova(M3)
```

YearF에 따른 SalePrice의 모든 평균이 같다는 귀무가설을 기각하지 못한다.

## HousePriceIndex사용

연도별 SalePrice의 변화가 통계적으로 유의미하지 않기 때문에 기간별 변화를 알 수 있는 HousePriceIndex를 사용하고자 한다.

All-Transactions House Price Index for Cambridge-Newton-Framingham, MA (MSAD)https://fred.stlouisfed.org/series/ATNHPIUS15764Q

quarter 기간별 자료이므로 quarter 열을 만들어준다.

```{r}
#| label: dataE 정의

dataE = dataD
```

```{r}
#| label: dataE의 연도 수준 확인
# dataE의 연도 수준 확인

table(dataE$YearF)
```

```{r}
#| label: dataE에 quarter지정
# dataE에 quarter지정

for(i in 1:nrow(dataE)){
    if(dataE$YearF[i] == "1989"){
      if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1989-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1989-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1989-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1989-4Q"
      }          
    } 
  else if(dataE$YearF[i] == "1990"){
    if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1990-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1990-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1990-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1990-4Q"
      }          
  }
  else if(dataE$YearF[i] == "1991"){
    if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1991-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1991-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1991-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1991-4Q"
      }          
  }  
  else if(dataE$YearF[i] == "1992"){
    if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1992-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1992-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1992-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1992-4Q"
      }          
  }
  else if(dataE$YearF[i] == "1993"){
    if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1993-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1993-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1993-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1993-4Q"
      }          
  }
  else if(dataE$YearF[i] == "1994"){
    if(dataE$MonthF[i] == "01"|dataE$MonthF[i] == "02"|dataE$MonthF[i] == "03"){
        dataE$Quarter[i] = "1994-1Q"
      }
      else if(dataE$MonthF[i] == "04"|dataE$MonthF[i] == "05"|dataE$MonthF[i] == "06"){
        dataE$Quarter[i] = "1994-2Q"
      }
      else if(dataE$MonthF[i] == "07"|dataE$MonthF[i] == "08"|dataE$MonthF[i] == "09"){
        dataE$Quarter[i] = "1994-3Q"
      } 
      else if(dataE$MonthF[i] == "10"|dataE$MonthF[i] == "11"|dataE$MonthF[i] == "12"){
        dataE$Quarter[i] = "1994-4Q"
      }          
  }
}
dataE$Quarter = as.factor(dataE$Quarter)
```

### HousePrieIndex열 만들기

```{r}
#| label: dataE에 quarter별 HousePriceIndex지정
# dataE에 quarter별 HousePriceIndex 지정

for(i in 1:nrow(dataE)){
    if(dataE$Quarter[i] == "1989-1Q"){
     dataE$HousePriceIndex[i] = 107.8
    }
  else if(dataE$Quarter[i] == "1989-2Q"){
     dataE$HousePriceIndex[i] = 106.99
  }  
  else if(dataE$Quarter[i] == "1989-3Q"){
     dataE$HousePriceIndex[i] = 108.63
  }    
  else if(dataE$Quarter[i] == "1989-4Q"){
     dataE$HousePriceIndex[i] = 108.92
  }
  else if(dataE$Quarter[i] == "1990-1Q"){
     dataE$HousePriceIndex[i] = 107.5
  }
  else if(dataE$Quarter[i] == "1990-2Q"){
     dataE$HousePriceIndex[i] = 104.33
  }
  else if(dataE$Quarter[i] == "1990-3Q"){
     dataE$HousePriceIndex[i] = 101.98
  }
  else if(dataE$Quarter[i] == "1990-4Q"){
     dataE$HousePriceIndex[i] = 100.21
  }
  else if(dataE$Quarter[i] == "1991-1Q"){
     dataE$HousePriceIndex[i] = 98.75
  }
  else if(dataE$Quarter[i] == "1991-2Q"){
     dataE$HousePriceIndex[i] = 97.70
  }
  else if(dataE$Quarter[i] == "1991-3Q"){
     dataE$HousePriceIndex[i] = 96.87
  }
  else if(dataE$Quarter[i] == "1991-4Q"){
     dataE$HousePriceIndex[i] = 97.68
  }
  else if(dataE$Quarter[i] == "1992-1Q"){
     dataE$HousePriceIndex[i] = 97.62
  }
  else if(dataE$Quarter[i] == "1992-2Q"){
     dataE$HousePriceIndex[i] = 96.83
  }
  else if(dataE$Quarter[i] == "1992-3Q"){
     dataE$HousePriceIndex[i] = 97.6
  }  
  else if(dataE$Quarter[i] == "1992-4Q"){
     dataE$HousePriceIndex[i] = 97.82
  }  
  else if(dataE$Quarter[i] == "1993-1Q"){
     dataE$HousePriceIndex[i] = 97.56
  }  
  else if(dataE$Quarter[i] == "1993-2Q"){
     dataE$HousePriceIndex[i] = 98.06
  }    
  else if(dataE$Quarter[i] == "1993-3Q"){
     dataE$HousePriceIndex[i] = 98.70
  }
  else if(dataE$Quarter[i] == "1993-4Q"){
     dataE$HousePriceIndex[i] = 99.45
  }
  else if(dataE$Quarter[i] == "1994-1Q"){
     dataE$HousePriceIndex[i] = 99.74
  }
  else if(dataE$Quarter[i] == "1994-2Q"){
     dataE$HousePriceIndex[i] = 99.38
  }
  else if(dataE$Quarter[i] == "1994-3Q"){
     dataE$HousePriceIndex[i] = 99.78
  }
  else if(dataE$Quarter[i] == "1994-4Q"){
     dataE$HousePriceIndex[i] = 98.79
  }
  else{
    dataE$HousePriceIndex[i] = 0
  }
} 
```


## 다중회귀분석

```{r}
#| label: dataE 구조 확인
# dataE 구조 확인
str(dataE)
```

### 다중 회귀 모형 Fullmodel(skip)

```
# LM1 = 모든 변수 상호작용 고려한 다중 회귀 모형
LM1 = lm(PrPerI ~ Interior * Zone * YearM * Days * Rooms * Bed * Bath * Condo * Tax * RC, dataG)
```

```
# LM1의 MSE 확인

F1 = anova(LM1)
F1[218,3] # LM1의 MSE

아래는 Fullmodel의 MSE
[1] 267.9195
```

```
# LM1을 활용한 Reyeme Affiar의 건물 가격 예측

predict(LM1, newdata = data.frame(Interior = 1040, Zone = "5Zone",YearM = "1994", Days = 24, Rooms = 5, Bed = 2, Bath = 1, Condo = 175 , Tax = 1121 , RC = "1"), interval = "prediction") #Days 24일은 4월 11일 ~ 5월 4일(당일 구매시) 기간 계산
#5Zone 은 건물이 위치한 Mid Cambridge(Area:M)의 Zone
```

**결과**

```
Warning: prediction from rank-deficient fit; attr(*, "non-estim") has doubtful cases

     fit        lwr       upr
1 -192707986 -686376546 300960573
```

다중공선성 때문인지 완전히 이상한 값이 나옴.

### 다중 회귀 모형 - 단계별 선택법

```{r}
#| label: 상호작용을 고려하지 않은 LM2 다중회귀 모형
# 상호작용을 고려하지 않은 LM2 다중회귀 모형

LM2 = lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + Bed + Bath + Condo + Tax + RC, dataE)
```

```{r}
#| label: LM2 다중회귀 모형의 MSE확인 579.6425
# LM2 다중회귀 모형의 MSE확인

F2 = anova(LM2)
F2[11,3] # LM2의 MSE : 986,615,274
```

```{r}
#| label: LM2 다중회귀 모형의 model selection 단계별 선택법
# LM2 다중회귀 모형의 model selection 단계별 선택법

step = stepAIC(LM2, scope = list(upper = ~ Interior*Zone*HousePriceIndex*Days * Rooms * Bed * Bath * Condo * Tax * RC, lower = ~1),direction="both",trace = FALSE )
```
```{r}
#| label: LM2 다중회귀 모형의 model selection 단계별 선택법 결과
# LM2 다중회귀 모형의 model selection 단계별 선택법 결과

step$anova
```

```{r}
#| label: 단계별 선택법에 의해 도출된 LM3
# 단계별 선택법에 의해 도출된 LM3 

LM3 =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE)
F3 = anova(LM3)
F3[23,3] # MSE = 672,603,086
```


### Reyeme Affiar의 건물 가격 예측

```{r}
#| label: LM3을 활용한 Reyeme Affiar의 건물 가격 예측

# LM3을 활용한 Reyeme Affiar의 건물 가격 예측

pre = predict(LM3, newdata = data.frame(Interior = 1040, Zone = "5Zone",HousePriceIndex = 99.38, Days = 24, Rooms = 5, Bed = 2, Bath = 1, Condo = 175 , Tax = 1121 , RC = "1"), interval = "prediction") 
#Days 24일은 4월 11일 ~ 5월 4일(당일 구매시) 기간 계산
#5Zone 은 건물이 위치한 Mid Cambridge(Area:M)의 Zone
pre
```

## 다중공선성

### LM3모형에 사용한 변수간 상관관계 확인(수치형 변수만)
```{r}
#| label: 수치형 변수만 있는 dataG_N
dataE_N = dataE[,c("SalePrice","Interior","Days","Rooms","Bed","Bath","Condo","Tax","HousePriceIndex")]
```

```{r}
#| label: 변수간 상관관계 확인
#| warning: false
chart.Correlation(dataE_N)
```

Interior - Rooms  
Interior - Bed
Interior - Bath  
Interior - Tax
Rooms - Bed  

위 변수간에 상관관계가 특히 높다. 

LM3 다중회귀모형의 회귀계수를 살펴보자.

```{r}
LM3$coefficients
```

5Zone, 1994년, RC=1 일 경우
Zone의 Reference Group = 1Zone


Days 8.572502e+01
Bed -5.774531e+04
Bath -8.689075e+03
Interior:RC1 5.732790e+01
의 회귀계수 부호 이상함 


```{r}
lm(SalePrice ~ Days,dataE)
```

```{r}
lm(SalePrice ~ Bed,dataE)
```

```{r}
lm(SalePrice ~ Bath,dataE)
```

```{r}
lm(SalePrice ~ Bed*RC,dataE)
```

```{r}
lm(SalePrice ~ Bath*RC, dataE)
```

```{r}
lm(SalePrice ~ Interior*RC, dataE)
```

```{r}
lm(SalePrice ~ Rooms*RC,dataE)
```

```{r}
F3 # LM3 회귀모형의 분산분석
```

전체적으로 p값이 매우 낮은편

유의하지 않은 회귀계수는 
```
Rooms:Bed         0.0645519 .  
Rooms:RC          0.1103384    
```

```{r}
vif(LM3)
```

Interior, Rooms, Bed,Tax, RC, Interior:Tax, Bed:RC, Interior:Rooms ,Interior:RC, Rooms:Bed, Rooms:RC, Interior:Rooms:RC 의 vif가 가장 높은 편

### 먼저 Bed 변수 제거 

```{r}
#| label: LM4 = LM3에서 Bed 변수 제거 
LM4 =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:RC + Interior:Rooms:RC,dataE)
F4 = anova(LM4)
F4[20,3] # MSE = 700,424,471
```

MSE는 높아진 상태이다.

```{r}
F4
```


LM4 다중회귀모형의 회귀계수를 살펴보자.

```{r}
LM4$coefficients
```


```{r}
gvlma(LM4)
```

영향점 있을 수 있음.

### 영향점 확인

```{r}
outliers_inf = abs(rstudent(LM4))>3
cbind(dataE[outliers_inf,],rstud = rstudent(LM3)[outliers_inf])
```
```{r}
outliers_inf_index = which(outliers_inf)
```


```{r}
dataF = dataE[-outliers_inf_index,]
```


```{r}
leverage = hatvalues(LM4)> 4/426
cbind(dataE[leverage,],hatv = hatvalues(LM3)[leverage]) #전체 데이터 모두 레버리지는 높음.
```

```{r}
#| label: LM4A = LM4에서 영향점 제거 
LM4A =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:RC + Interior:Rooms:RC,dataF)
F4A = anova(LM4A)
F4A[20,3] # MSE = 548,253,900
```

```{r}
F4A
```

```{r}
LM4A$coefficients
```



```{r}
#| label: LM4A 다중회귀 모형의 model selection 단계별 선택법
# LM4A 다중회귀 모형의 model selection 단계별 선택법

step2 = stepAIC(LM4A, scope = list(upper = ~ Interior * Zone * HousePriceIndex * Days * Rooms * Bath * Condo * Tax * RC, lower = ~1),direction="both",trace = FALSE )
```
```{r}
#| label: LM4A 다중회귀 모형의 model selection 단계별 선택법 결과
# LM4A 다중회귀 모형의 model selection 단계별 선택법 결과

step2$anova
```

```{r}
LM4AA = lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + Bath:RC + 
    Interior:Rooms + Interior:Zone + Condo:RC + Zone:Days + Rooms:RC + 
    Rooms:Bath + Rooms:Condo + Interior:Zone:Tax + Rooms:Bath:RC,dataF)
F4AA = anova(LM4AA)
F4AA[22,3] #MSE = 517,609,611
```

```{r}
LM4AA$coefficients
```
```{r}
LM4AA
```


### 영향점 제거2

```{r}
outliers_inf = abs(rstudent(LM4AA))>3
cbind(dataF[outliers_inf,],rstud = rstudent(LM4AA)[outliers_inf])
```
```{r}
outliers_inf_index = which(outliers_inf)
```


```{r}
dataG = dataF[-outliers_inf_index,]
```

```{r}
#| label: LM4AAA = LM4AA에서 영향점 제거 
LM4AAA =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + Bath:RC + 
    Interior:Rooms + Interior:Zone + Condo:RC + Zone:Days + Rooms:RC + 
    Rooms:Bath + Rooms:Condo + Interior:Zone:Tax + Rooms:Bath:RC,dataG)
F4AAA = anova(LM4AAA)
F4AAA[22,3] # MSE = 548,253,900 #MSE = 517,609,611
```

:::{.callout-note}
맨처음부터 영향값을 많이 제거한 Team10.qmd가 초반부터 좋은 성능을 보이는 것으로 보인다.(데이터 수는 작지만)
:::

### 혹은 Rooms 변수 제거 

```{r}
#| label: LM4R = LM3에서 Rooms 변수 제거 
LM4R =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + 
    Bed + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Bath:RC + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days ,dataE)
F4R = anova(LM4R)
F4R[18,3] # MSE = 707,083,859
```

MSE는 높아진 상태이다.

```{r}
F4R
```


LM4 다중회귀모형의 회귀계수를 살펴보자.

```{r}
#| label: LM4R$coefficients

LM4R$coefficients
```

완전히 이상한 회귀계수가 나온다.

### 혹은 Bath 변수 제거 

```{r}
#| label: LM4B = LM3에서 Bath 변수 제거 
LM4B =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed  + Condo + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE)
F4B = anova(LM4B)
F4B[21,3] # MSE = 700,330,595 (Bed변수 제거했을 때의 MSE = 700,634,486 보다 나은 MSE 보여줌)
```

MSE는 높아진 상태이다.

```{r}
F4B
```


LM4B 다중회귀모형의 회귀계수를 살펴보자.

```{r}
#| label: LM4B$coefficients

LM4B$coefficients
```

Bed의 회귀계수가 아쉬움

### 혹은 Condo 변수 제거 

```
LM3

SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE
```

```{r}
#| label: LM4C = LM3에서 Condo 변수 제거 
LM4C =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed + Bath  + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Bath:RC + Interior:Rooms + Interior:Zone  + 
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE)
F4C = anova(LM4C)
F4C[21,3] # MSE = 717,129,108 
```

MSE는 높아진 상태이다.

```{r}
F4C
```


```{r}
#| label: LM4C$coefficients

LM4C$coefficients
```

완전히 이상한 회귀계수가 나온다.

### 혹은 Tax 변수 제거 

```
LM3

SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed + Bath + Condo + Tax + RC + Zone:Tax + Interior:Tax + 
    Bed:RC + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC + 
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE
```

```{r}
#| label: LM4T = LM3에서 Tax 변수 제거 
LM4T =lm(SalePrice ~ Interior + Zone + HousePriceIndex + Days + Rooms + 
    Bed + Bath + Condo  + RC + 
    Bed:RC + Bath:RC + Interior:Rooms + Interior:Zone + Condo:RC +
    Interior:RC + Zone:Days + Rooms:Bed + Rooms:RC + Interior:Rooms:RC,dataE)
F4T = anova(LM4T)
F4T[20,3] # MSE = 1,054,562,154
```

MSE는 높아진 상태이다.

```{r}
F4T
```


```{r}
#| label: LM4T$coefficients

LM4T$coefficients
```

완전히 이상한 회귀계수가 나온다.

